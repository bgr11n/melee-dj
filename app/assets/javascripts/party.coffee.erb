class @PartyVM
  constructor: (data) ->
    @nickname = data.nickname
    # TODO: Catch "Faye is not defined" - in case if ws server is down
    @client = new Faye.Client data.fayeServer

    @searcher = new SearcherVM @
    @playlist = new PlaylistVM data.playlistId, @
    @chat = new ChatVM @

class SearcherVM
  constructor: (party) ->
    @party = party
    @query = ko.observable ''
    @results = ko.observableArray []

    @update = (data, event) =>
      if event.keyCode == 13 then @search() else true

    @search = () =>
      if @query().length > 0
        $.get '/api/v1/youtube/search', { q: @query() }, (res) =>
          for song in res
            @results.push new SongVM(song)

    @addToPlaylist = (song) =>
      $.post "/api/v1/#{@party.nickname}/playlist/song", { song: song }, (res) =>
        @query ''
        @results []

class PlaylistVM
  constructor: (id, party) ->
    @id = id
    @party = party
    @songs = ko.observableArray []

    @subscription = @party.client.subscribe "/#{@party.nickname}/playlist/songs/new", (data) =>
      for song in JSON.parse(data)
        @songs.push new SongVM(song.track)

    $(document).on 'ready page:change', =>
      # Sure we need this?
      @subscription.cancel()

    # TODO: MB fetch in some other way? API
    $.get "/playlists/#{@id}/songs", (data) =>
      for song in data
        @songs.push new SongVM(song)

class ChatVM
  constructor: (party) ->
    @party = party
    @messages = ko.observableArray []
    @newText = ko.observable ''

    @sendText = (data) =>
      if @newText().length > 0
        $.post data.action, { 'chat_message': { 'text': @newText() } }, (res) =>
          @newText ''

    @subscription = @party.client.subscribe "/#{@party.nickname}/chat/messages/new", (data) =>
      for message in JSON.parse(data)
        @messages.push new MessageVM(message)

    $(document).on 'ready page:change', =>
      # Sure we need this?
      @subscription.cancel()

class SongVM
  constructor: (data) ->
    @uri = data.uri
    @title = data.title
    @thumbnail = data.thumbnail
    @created = data.created_at
    @user = new UserVM(data.user) if data.user

class MessageVM
  constructor: (data) ->
    @text = data.text
    @created = data.created_at
    @user = new UserVM(data.user)

class UserVM
  constructor: (data) ->
    @email = data.email
    @nickname = data.nickname
    @grand = data.grand
